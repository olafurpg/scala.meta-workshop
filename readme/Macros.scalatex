@import Main._
@import scalaworld.Readme._
@import scala.meta.tutorial.BuildInfo

@sect{Macro annotations}
  @p
    Scalameta makes it possible to write new-style macro annotations.  In
    comparison with
    @lnk("the state of the art based on scala.reflect",
         "http://docs.scala-lang.org/overviews/macros/annotations.html"),
    new-style macro annotations are:
    @ul
      @li
        @b{Lightweight}. The new macro system no longer features the split
        between macro defs and macro impls.  Moreover, writing macros no longer
        requires carrying around a context and juggling path-dependent types.
        As a result, macros can be defined with much less ceremony.
      @li
        @b{Portable}. New-style macros are based on a platform-independent
        metaprogramming API defined in Scalameta.  Unlike scala.reflect,
        Scalameta doesn't depend on compiler internals, so macros based on
        Scalameta can be run in a multitude of environments, including Scala,
        IntelliJ IDEA and Dotty.

    In order to define a new-style macro annotation, create a class that
    extends @code{StaticAnnotation} and create an @code{inline} apply method
    with a @code{meta} block in it.  Inside the @code{meta} block, you can take
    apart the annotated member and generate new code using
    @lnk("Scalameta quasiquotes",
         "https://github.com/scalameta/scalameta/blob/master/notes/quasiquotes.md").
    @code{inline} and @code{meta} are new language constructs introduced by
    macro paradise 3.x.

  @sect{Setup build}
    It's possible to write macro annotations on Scalameta trees using
    the Scalameta paradise compiler plugin.
    To configure the Scalameta paradise plugin, you need to enable it in your build
    for both the projects that define macro annotation and the projects
    that use macro annotations
    @hl.scala
      lazy val macroAnnotationSettings = Seq(
        addCompilerPlugin("org.scalameta" % "paradise" % "@BuildInfo.paradise" cross CrossVersion.full),
        scalacOptions += "-Xplugin-require:macroparadise",
        scalacOptions in (Compile, console) := Seq() // macroparadise plugin doesn't work in repl yet.
      )
      lazy val projectThatDefinesMacroAnnotations = project.settings(
        libraryDependencies += "org.scalameta" %% "scalameta" % "@BuildInfo.scalameta" % Provided,
        macroAnnotationSettings
        // ... your other project settings
      )
      lazy val projectThatUsesMacroAnnotations = project.settings(
        macroAnnotationSettings,
        // ... your other project settings
      )

    These settings are already configured in the tutorial repo.
    If you have cloned the tutorial repo, you can run the macro expansion
    with

  @hl.scala
    macros/test:run

  @sect{Hello World}
    Here is an example macro annotation:

    @hl.ref(wd/'macros/'src/'main/'scala/'scalaworld/'macros/"Main.scala")

    The annotation wraps the body of an object into a @code{main} function,
    serving a similar function as extending @code{App}.

  @sect{Class2Map}
    Implement a @code{Class2Map} macro annotation that injects a @code{toMap} method
    that creates a @code{Map[String, Any]} from the fields of this class.

    @p
      Solution:
      @hl.ref(wd/'macros/'src/'main/'scala/'scalaworld/'macros/"Class2Map.scala")

  @sect{WithApply}
    Implement a @code{WithApply} macro annotation that creates a @code{apply}
    method to construct an instance of the class (just like is created for case classes).

    @p
      The challenge here is to handle the companion object correctly.

      @ul
        @li
          If the companion object exists, add the @code{apply} method to it.
        @li
          If the companion object doesn't exists, create it.
    @p
      Solution:
      @hl.ref(wd/'macros/'src/'main/'scala/'scalaworld/'macros/"WithApply.scala")

  @sect{Debug}
    Open up @code{Debug.scala} and implement a @code{Debug} macro annotation
    for @b{methods} that:

    @ul
      @li
        Prints out the argument names and their values at the beginning of the method.
      @li
        Prints out the time it took to run the method.
      @li
        Prints out the value of the method result.

    @p
      Solution:
      @hl.ref(wd/'macros/'src/'main/'scala/'scalaworld/'macros/"Debug.scala")

    For extra credit:
    @ul
      @li
        Expand the method into two methods, where one is the original method
        and the second one has a named suffixed with @code{Debug}
        and that's where the printing happens.

  @sect{generic}
    Implement a @code{generic} macro annotation to automatically derive
    a shapeless @code{Generic[T]} instance.

    @p
      Note, macro annotations are purely syntactic, see @sect.ref{How do I get the type of a tree?}.
      As a result, to find subclasses of a sealed trait, we depend on the assumption
      that all the subclasses are put under the companion class of the sealed
      trait. The implementation below looks inside the companion class and
      extracts definitions of classes which extend the sealed trait.

    @p
      Solution:
      @hl.ref(wd/'macros/'src/'main/'scala/'scalaworld/'macros/"generic.scala")

  @sect{Testing macro annotations}
    See MainTest for an example of to both unit test and integration test a
    macro annotation.
    @hl.ref(wd/'macros/'src/'test/'scala/'scalaworld/'macros/"MainTest.scala")

