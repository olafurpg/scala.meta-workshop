@import Main._
@import ammonite.ops._
@import scalaworld.Readme._
@import scala.meta.tutorial.BuildInfo


@sect{sbt-semantic-example}
  For plug and play example, clone
  @lnk("sbt-semantic-example", "https://github.com/scalameta/sbt-semantic-example")
  and follow the readme instructions.

@sect{sbt}
  @hl.scala
    lazy val scalahostSettings = Seq(
      addCompilerPlugin("org.scalameta" % "scalahost" % "@BuildInfo.scalameta" cross CrossVersion.full),
      scalacOptions ++= Seq(
        "-Yrangepos",
        "-Xplugin-require:scalahost"
      )
    )

  Add the following settings your project like this

  @hl.scala
    lazy val analyzeMe = project.settings(
      // Scalahost supports the Scala versions: @BuildInfo.semanticScalaVersions.mkString(", ").
      // Note, the Scala version must match down to the latest (PATCH) number.
      scalaVersion := "@BuildInfo.scalaVersion",
      scalahostVersions
    )

@sect{Other build tools}
  You can use Scalahost outside of sbt by passing in custom scalac flags.
  @hl.scala
    // -Xplugin-require:scalahost tells scalac to fail fast if Scalahost failed to load
    // -Yrangepos is required by Scalahost
    scalac -Xplugin:/path/to/scalahost.jar -Yrangepos -Xplugin-require:scalahost Code.scala

@sect{scalameta/tutorial semantic/run}
  If you have cloned the repo for this tutorial as explained in
  @sect.ref{Tutorial}, you can execute @code{sbt semantic/run} to run
  an example application using the semantic API.

@sect{Coursier}
  If you have @lnk("coursier", "https://github.com/coursier/coursier") installed,
  you can run this one-liner assuming you want to analyze a source file @code{Foo.scala}

  @hl.scala
    // make sure the version of scalac is @BuildInfo.scalaVersion
    scalac -Yrangepos -Xplugin-require:scalahost -Xplugin:$(coursier fetch --intransitive org.scalameta:scalahost_@BuildInfo.scalaVersion:1.8.0) Foo.scala


@sect{Verify installation}
  To verify that the Scalahost compiler plugin is installed
  @ul
    @li
      make sure that you are compiling least one source file
    @li
      clean
    @li
      compile
    @li
      look into the target/ directory for files with the file extension @code{.semanticdb}.
      The files will appear under a directory called @code{META-INF/semanticdb}.

  If you cannot find any @code{.semanticdb} files, then something went wrong with the setup.
  Don't hesitate to ask questions on @gitter.
