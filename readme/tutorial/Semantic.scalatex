@import scalaworld.Tutorial._
@import ammonite.ops._
@import scalaworld.Readme._
@import scala.meta.tutorial.BuildInfo

@sect{Semantic API}
  The semantic API offers operations to query information from the Scala compiler
  such as name resolution (@code{println} => @code{_root_.scala.Predef.println}),
  symbol signatures (@code{_root_.com.Example.main([Ljava/lang/String;)V.} =>
  @code{def main(args: Array[String]): Unit}),
  These operations can for example be used by tools like
  @lnk("scalafix", "https://scalacenter.github.io/scalafix") to rewrite Scala source code.
  The semantic API cannot be used from @sect.ref{Macro annotations}.

  @sect{SemanticDB}
    @p
      A key property of the Scalameta semantic API is its @b{portability}.
      "SemanticDB" is the storage format for information that
      the semantic API consumes.

    @p
      Currently, a typical approach to semantic developer tools in Scala is
      implementing them as compiler plugins and then using them inside builds.
      Apart from being a hassle to configure, this approach is also quite slow,
      because it needs to run a Scala typechecker every time when a tool is
      invoked.

    @p
      Scalameta enables a much more convenient workflow. First, we use our
      semanticdb-scalac compiler plugin to generate a semantic database for it
      during type checking.
      This is done only once per unique snapshot of the codebase.
      Afterwards, using the persisted semantic data, we can launch
      any number of developer tools any number of times without having to
      typecheck the codebase again.

    @p
      The storage format used for the SemanticDB is defined using
      @lnk("Protocol Buffers", "https://www.google.ch/search?q=protocol+buffers&oq=protocol+buffer&aqs=chrome.0.0j69i61j69i57j69i61j0l2.6856j0j7&sourceid=chrome&ie=UTF-8"),
      or "protobuf" for short.  The SemanticDB protobuf schema is small, at
      the time of this writing it is ~50 lines of code.  The full schema is
      available
      @lnk("here",
           "https://github.com/scalameta/scalameta/blob/master/langmeta/shared/src/main/protobuf/semanticdb.proto").
      Files containing SemanticDB binary data use the @code{.semanticdb} file
      extension by convention.

  @sect{semanticdb-scalac}
    To build a @sect.ref{SemanticDB} with the Scala 2.x compiler, you will need
    the semanticdb-scalac compiler plugin.
    This compiler plugin is developed in the main Scalameta repository.
    There are several ways to @sect.ref("Installation", "install") semanticdb-scalac
    into your build.

    @sect{Installation}
      The required setup for the Semantic API is more involved than for the
      Syntactic API (parsing/tokenizing).
      Most importantly, we first need to compile source files with the Scala compiler
      and semanticdb-scalac compiler plugin in order to collect information such as types,
      symbols and more. While it's possible to tokenize or parse code that
      doesn't compile, a source file must successfully typecheck in order for it
      to be analyzed with the Semantic API.

      @scalatex.tutorial.SemanticInstallation()

  @sect{semanticdb-sbt}
    It's possible to build a SemanticDB for @code{.sbt} and @code{.scala}
    sources of sbt 0.13 builds.
    For more details, see
    @lnk("scalafix/semanticdb-sbt", "https://scalacenter.github.io/scalafix/#semanticdb-sbt").

  @sect{Example}

    @p
      Let's take a look at the inside of a @code{.semanticdb} file.
      Given a source file @code{Input.scala}

    @hl.ref(cwd/'semantic/'input/'src/'main/'scala/'scalaworld/'semantic/"Input.scala")

    @p
      the pretty printed representation of its corresponding @code{Input.semanticdb}
      is the following:

    @hl.scala(database.toString)

    @p
      That is a lot of output, let's take a closer look at each of
      the sections:
      @sect.ref{Names},
      @sect.ref{Messages},
      @sect.ref{Denotations}, and
      @sect.ref{Sugars}.

  @sect{Reference}
    @p
      Below are explanations of the terminology used in SemanticDB.
    @scalatex.tutorial.SemanticReference()

