@import scalaworld.Tutorial._
@import scalaworld.Readme._

@sect{Trees}
  @p
    Reminder. We assume you have this import in scope:

  @repl
    import scala.meta._

  @sect{q"Quasiquotes"}
    @p
      The easiest way to get started with Scalameta trees is using quasiquotes.

    @meta
      q"case class User(name: String, age: Int)"

    @p
      Quasiquotes can be composed

    @meta
      val method = q"def `is a baby` = age < 1"
      q"""
      case class User(name: String, age: Int) {
        $method
      }
      """

    @p
      Quasiquotes can also be used to deconstruct trees with pattern matching

    @meta
      q"def `is a baby` = age < 1" match {
        case q"def $name = $body" =>
          s"You ${name.syntax} if your ${body.syntax}"
      }

    @warning
      @note. Quasiquotes currently ignore comments:

      @meta
        q"val x = 2 // assignment".syntax

      If you need comments, you can use @sect.ref{.parse[T]}

      @meta
        "val x = 2 // assignment".parse[Stat].get.syntax

  @sect{.parse[T]}
    @p
      If the contents that you want to parse are only known at runtime,
      you can't use quasiquotes.
      For example, this happens when you need to parse file contents.

    @p
      Here's how to parse a compilation unit.

    @meta
      "object Main extends App { println(1) }".parse[Source].get

    @success
      Pro tip. You can also call @code{.parse[T]} on a @code{File},
      just like this

      @meta
        new java.io.File("readme/ParseMe.scala").parse[Source]

    @p
      If we try to parse a statement as a compilation unit we will fail.

    @meta
      "val x = 2".parse[Source] // compilation error

    @p
      We need to explicitly parse it as a statement (@code{Stat}).

    @meta
      "val x = 2".parse[Stat].get

    @p
      We can also parse case statement

    @meta
      "case Foo(bar) if bar > 2 => println(bar)".parse[Case].get
    @p
      Scalameta has dozens of parsers:
      @image("parse.png")
      However, @code{.parse[Stat]} and @code{.parse[Source]} are
      usually all you need.

  @sect{dialects}
    @p
      I didn't tell the whole story when I said you need to pass in a type
      argument to parse statements.
      You also need to pass in a dialect!
      However, Scalameta will by default pick the @code{Scala211} dialect
      for you if you don't provide one explicitly.

    @p
      With the SBT dialects, we can parse vals as top-level statements.

    @meta
      dialects.Sbt0137(
        "lazy val core = project.settings(commonSettings)"
      ).parse[Source].get

    @p
      We can even parse multiple top level statements

    @meta
      dialects.Sbt0137(
        """
        lazy val core = project.settings(commonSettings)

        lazy val extra = project.dependsOn(core)
        """
      ).parse[Source].get

    @p
      For the remainder of the workshop, we will only work with the @code{Scala211}
      dialect.

  @sect{Tree.syntax}
    @p
      Just like with tokens, we can also run @code{.syntax} on trees.

    @meta
      "foo(bar)".parse[Stat].get.syntax

    However, Scalameta can also do this even if you manually construct the tree

    @meta
      Term.Apply(
        Term.Name("foo"),
        Term.Name("bar") :: Nil
      ).syntax

    @p
      We never gave Scalameta parentheses but still it figured out we needed
      them.
      Pretty cool huh.

  @sect{Tree.structure}
    @p
      Just like with tokens, we can also run @code{.structure} on trees.

    @meta
      "foo(bar)".parse[Stat].get.structure

    @p
      @code{.structure} ignores any syntactic trivia like whitespace and comments

    @meta
      "foo  ( /* this is a comment */ bar  ) // eol".parse[Stat].get.structure

    @p
      This can be useful for example in debugging, testing or equality checking.

  @sect{Tree.collect}
    @p
      You can collect on Scalameta.Tree just like regular collections.

    @meta
      source"""sealed trait Op[A]
          object Op extends B {
            case class Foo(i: Int) extends Op[Int]
            case class Bar(s: String) extends Op[String]
          }""".collect { case cls: Defn.Class => cls.name }

  @sect{Tree.transform}
    @p
      Transform Scalameta.Tree with @code{.transform}.

    @meta
      q"myList.filter(_ > 3 + a).headOption // comments are removed :(".transform {
        case q"$lst.filter($cond).headOption" => q"$lst.find($cond)"
      }

    @warning
      @code{.transform} does not preserve syntactic details such as comments
      and formatting. There has been made some work on source aware transformation,
      see @lnk("#457", "https://github.com/scalameta/scalameta/pull/457"),
      but it still requires a bit more work.

  @sect{Tree.==}
    @p
      Just like with tokens, tree equality is by default by reference:

    @meta
      q"foo(bar)" == q"foo(bar)"

    This means you need to be explicit if you mean syntactic equality

    @meta
      q"foo(bar)".syntax == q"foo(bar)".syntax

    @p
      or structural equality

    @meta
      q"foo(bar)".structure == q"foo(bar)".structure

  @sect{Comprehensive trees}
    @p
      A key feature of Scalameta trees is that they comprehensively cover
      all corners of the Scala syntax.
      A side effect of this is that the Scalameta tree hierarchy containsÂ a
      lot of types.
      For example, there is a different tree node for an abstract @code{def} (@code{Decl.Def})

      @meta
        q"def add(a: Int, b: Int)" // Decl.Def

      and a @code{def} with an implementation (@code{Defn.Def})

      @meta
        q"def add(a: Int, b: Int) = a + b" // Defn.Def

      @p
        Fortunately, most of the time you won't need to worry about this.
        Quasiquotes help you create/match/compose/deconstruct the correct instances.
        However, occasionally you may need to debug the types of the trees you have.

      @p
        For your convenience, I've compiled together the most common types in
        this handy diagram:
        @image("tree.png")
